---
title: "Your Title"
subtitle: "BMIN503/EPID600 Final Project"
author: "FirstName LastName"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

Use this template to complete your project throughout the course. Your Final Project presentation will be based on the contents of this document. Replace the title/name above and text below with your own, but keep the headers. Feel free to change the theme and other display settings, although this is not required. I added a new sentence

## Overview {#sec-overview}

The aim of this project is to develop a machine learning-based lung cancer detection system that assists physicians in identifying potentially malignant nodules by analyzing CT scan images, thereby improving diagnostic accuracy and efficiency. The core objectives of the project are to reduce the false-positive rate, decrease physicians' workload, and provide support for early lung cancer diagnosis.

## Introduction {#sec-introduction}

Lung cancer is one of the leading causes of cancer-related deaths globally and is usually detected at an advanced stage, resulting in limited treatment options. Early detection can significantly improve survival rates, but current diagnostic methods rely on extensive manual review of CT scan images by radiologists, a process that is both time-consuming and susceptible to subjective factors. The aim of this project is to develop a machine learning model to aid in the early diagnosis of lung cancer, with the goal of reducing false positives and improving diagnostic efficiency, thereby supporting clinicians. The project is inherently interdisciplinary, incorporating knowledge from oncology and machine learning. Oncologists provided insights into cancer progression, risk factors, and diagnostic challenges, while machine learning experts provided methods for model selection, data enhancement, and multimodal data integration.

I spoke with Dr. Mowery and Dr. Fan, who emphasized the importance of reducing the false-positive rate and provided clinical knowledge about key risk factors to help optimize early lung cancer diagnosis, and Dr. Mowery, who suggested integrating image data and clinical text annotations and proposed technical ideas for combining visual and non-visual data to improve prediction accuracy. I combined their claims of having made predictions with data and evaluated the predictions.

## Methods {#sec-methods}

Describe the data used and general methodological approach used to address the problem described in the @sec-introduction. Subsequently, incorporate full R code necessary to retrieve and clean data, and perform analysis. Be sure to include a description of code so that others (including your future self) can understand what you are doing and why.

```{r}
library(keras)
library(tensorflow)
library(ggplot2)
library(dplyr)
library(caret)

tensorflow::install_tensorflow()
tensorflow::set_random_seed(1234)

```

```{r}
batch_size <- 64
img_size <- c(224, 224)
channels <- 3
class_count <- 5

data_dir <- "lung_colon_image_set"
filepaths <- list.files(data_dir, recursive = TRUE, full.names = TRUE)
labels <- basename(dirname(filepaths))
contents <- list.files(data_dir)
print(contents)
```

```{r}
folds <- list.files(data_dir, full.names = TRUE)
print(folds)
for (fold in folds) {
  flist <- list.files(fold, full.names = TRUE)

  
  for (f_path in flist) {
    filelist <- list.files(f_path, full.names = TRUE)

    
    for (file in filelist) {
      filepaths <- c(filepaths, file)
      
      label <- switch(basename(f_path),
                      'colon_aca' = 'Colon Adenocarcinoma',
                      'colon_n' = 'Colon Benign Tissue',
                      'lung_aca' = 'Lung Adenocarcinoma',
                      'lung_n' = 'Lung Benign Tissue',
                      'lung_scc' = 'Lung Squamous Cell Carcinoma',
                      NA)
      
      labels <- c(labels, label)
    }
  }
}

df <- data.frame(filepaths = filepaths, labels = labels, stringsAsFactors = FALSE)
df <- na.omit(df)

```

```{r}
print(head(df, 10))

```

```{r}
library(keras)
library(caret)
library(tensorflow)
install_tensorflow()

```

```{r}

library(reticulate)
py_config()
reticulate::virtualenv_install(envname = "r-tensorflow", packages = "pandas")

```

```{r}
library(keras)
library(tensorflow)
library(caret)

tensorflow::use_virtualenv("r-tensorflow", required = TRUE)


set.seed(123)

trainIndex <- createDataPartition(df$labels, p = 0.8, list = FALSE)
train_df <- df[trainIndex, ]
dummy_df <- df[-trainIndex, ]

validIndex <- createDataPartition(dummy_df$labels, p = 0.5, list = FALSE)
valid_df <- dummy_df[validIndex, ]
test_df <- dummy_df[-validIndex, ]

batch_size <- 64
img_size <- c(224, 224)
channels <- 3

train_gen <- image_data_generator(rescale = 1/255)
test_gen <- image_data_generator(rescale = 1/255)

train_images <- flow_images_from_dataframe(
  dataframe = train_df, 
  x_col = "filepaths", 
  y_col = "labels", 
  generator = train_gen, 
  target_size = img_size, 
  class_mode = "categorical", 
  color_mode = "rgb", 
  shuffle = TRUE, 
  batch_size = batch_size
)

valid_images <- flow_images_from_dataframe(
  dataframe = valid_df, 
  x_col = "filepaths", 
  y_col = "labels", 
  generator = test_gen, 
  target_size = img_size, 
  class_mode = "categorical", 
  color_mode = "rgb", 
  shuffle = TRUE, 
  batch_size = batch_size
)

test_images <- flow_images_from_dataframe(
  dataframe = test_df, 
  x_col = "filepaths", 
  y_col = "labels", 
  generator = test_gen, 
  target_size = img_size, 
  class_mode = "categorical", 
  color_mode = "rgb", 
  shuffle = FALSE, 
  batch_size = batch_size
)

```

```{r}
library(keras)
library(ggplot2)
library(gridExtra)

g_dict <- train_images$class_indices
classes <- names(g_dict)


```

```{r}
library(reticulate)
reticulate::virtualenv_install(envname = "r-tensorflow", packages = "Pillow")

# 确认是否可以成功导入 PIL
py_run_string("from PIL import Image")
```

```{r}
batch <- generator_next(train_images)
images <- batch[[1]]
labels <- batch[[2]]

par(mfrow = c(4, 4), mar = c(1, 1, 1, 1))

for (i in 1:16) {
  image <- images[i, , , ] / 255
  label_index <- which.max(labels[i, ])
  class_name <- classes[label_index]
  
  plot(as.raster(image), main = class_name, axes = FALSE)
  title(class_name, col.main = "blue", cex.main = 1.2)
}

```

## Results {#sec-results}

Describe your results and include relevant tables, plots, and code/comments used to obtain them. You may refer to the @sec-methods as needed. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

## Conclusion

This the conclusion. The @sec-results can be invoked here.
